// Generated by CoffeeScript 1.9.3
(function() {
  var Directory, File, HS, Util, fs, ref,
    slice = [].slice;

  ref = require('atom'), Directory = ref.Directory, File = ref.File;

  fs = require('fs');

  HS = function() {
    return require('../hs/hs.min.js');
  };

  module.exports = Util = {
    isDirectory: function(dir) {
      var ref1;
      switch (false) {
        case typeof (dir != null ? dir.getPath : void 0) !== 'function':
          return Util.isDirectory(dir.getPath());
        case typeof dir !== 'string':
          return (ref1 = ((function() {
            try {
              return fs.statSync(dir).isDirectory();
            } catch (_error) {}
          })())) != null ? ref1 : false;
        default:
          return false;
      }
    },
    getRootDirFallback: function(file) {
      var dir, ref1;
      dir = atom.project.getDirectories().filter(function(dir) {
        return dir.contains(file != null ? typeof file.getPath === "function" ? file.getPath() : void 0 : void 0);
      })[0];
      if (dir == null) {
        dir = atom.project.getDirectories()[0];
      }
      if ((dir != null ? typeof dir.getPath === "function" ? dir.getPath() : void 0 : void 0) === 'atom://config') {
        dir = null;
      }
      if (!Util.isDirectory(dir)) {
        dir = (ref1 = file != null ? typeof file.getParent === "function" ? file.getParent() : void 0 : void 0) != null ? ref1 : new Directory('.');
      }
      return dir;
    },
    getRootDir: function(bufferOrFileOrString) {
      var dir, dirHasCabalFile, dirHasSandboxFile, file, findProjectRoot, ref1, ref2;
      dirHasCabalFile = function(d) {
        if (d == null) {
          return false;
        }
        return d.getEntriesSync().some(function(file) {
          return file.isFile() && file.getBaseName().endsWith('.cabal');
        });
      };
      dirHasSandboxFile = function(d) {
        if (d == null) {
          return false;
        }
        return d.getEntriesSync().some(function(file) {
          return file.isFile() && (file.getBaseName() === 'cabal.sandbox.config');
        });
      };
      findProjectRoot = function(d, check) {
        while (!((d != null ? typeof d.isRoot === "function" ? d.isRoot() : void 0 : void 0) || (d == null) || check(d))) {
          d = d != null ? typeof d.getParent === "function" ? d.getParent() : void 0 : void 0;
        }
        if (check(d)) {
          return d;
        }
      };
      file = (function() {
        switch (false) {
          case bufferOrFileOrString.file == null:
            return bufferOrFileOrString.file;
          case typeof bufferOrFileOrString.getPath !== 'function':
            return bufferOrFileOrString;
          case typeof bufferOrFileOrString !== 'string':
            return new File(bufferOrFileOrString);
        }
      })();
      dir = Util.isDirectory(file) ? new Directory(file.getPath()) : (ref1 = file != null ? typeof file.getParent === "function" ? file.getParent() : void 0 : void 0) != null ? ref1 : Util.getRootDirFallback(file);
      dir = (ref2 = findProjectRoot(dir, dirHasCabalFile)) != null ? ref2 : findProjectRoot(dir, dirHasSandboxFile);
      if (!Util.isDirectory(dir)) {
        dir = Util.getRootDirFallback(file);
      }
      return dir;
    },
    parseDotCabal: function() {
      var a, ref1;
      a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref1 = HS()).parseDotCabal.apply(ref1, a);
    },
    getComponentFromFile: function() {
      var a, ref1;
      a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref1 = HS()).getComponentFromFile.apply(ref1, a);
    },
    parseDotCabalSync: function() {
      var a, ref1;
      a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref1 = HS()).parseDotCabalSync.apply(ref1, a);
    },
    getComponentFromFileSync: function() {
      var a, ref1;
      a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref1 = HS()).getComponentFromFileSync.apply(ref1, a);
    },
    unlit: function() {
      var a, ref1;
      a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref1 = HS()).unlit.apply(ref1, a);
    },
    unlitSync: function() {
      var a, ref1;
      a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref1 = HS()).unlitSync.apply(ref1, a);
    },
    parseHsModuleImports: function() {
      var a, ref1;
      a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref1 = HS()).parseHsModuleImports.apply(ref1, a);
    },
    parseHsModuleImportsSync: function() {
      var a, ref1;
      a = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (ref1 = HS()).parseHsModuleImportsSync.apply(ref1, a);
    }
  };

}).call(this);
