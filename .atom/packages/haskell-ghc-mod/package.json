{
  "_args": [
    [
      {
        "raw": "/tmp/d-117326-9535-25yb48.tkfz4lhaor/package.tgz",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "/tmp/d-117326-9535-25yb48.tkfz4lhaor/package.tgz",
        "spec": "/tmp/d-117326-9535-25yb48.tkfz4lhaor/package.tgz",
        "type": "local"
      },
      "/tmp/apm-install-dir-117326-9535-1vidltd.3ha2botj4i"
    ]
  ],
  "_from": "../d-117326-9535-25yb48.tkfz4lhaor/package.tgz",
  "_id": "haskell-ghc-mod@1.19.9",
  "_inCache": true,
  "_installable": true,
  "_location": "/haskell-ghc-mod",
  "_phantomChildren": {},
  "_requested": {
    "raw": "/tmp/d-117326-9535-25yb48.tkfz4lhaor/package.tgz",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "/tmp/d-117326-9535-25yb48.tkfz4lhaor/package.tgz",
    "spec": "/tmp/d-117326-9535-25yb48.tkfz4lhaor/package.tgz",
    "type": "local"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:../d-117326-9535-25yb48.tkfz4lhaor/package.tgz",
  "_shasum": "deb8d1b8763976490b8d1b3417fb85cafee8ebde",
  "_shrinkwrap": null,
  "_spec": "/tmp/d-117326-9535-25yb48.tkfz4lhaor/package.tgz",
  "_where": "/tmp/apm-install-dir-117326-9535-1vidltd.3ha2botj4i",
  "activationHooks": [
    "language-haskell:grammar-used"
  ],
  "bugs": {
    "url": "https://github.com/atom-haskell/haskell-ghc-mod/issues"
  },
  "consumedServices": {
    "ide-haskell-upi": {
      "description": "Uses ide-haskell's unified pluggable interface",
      "versions": {
        "0.0.1": "consumeUPI"
      }
    }
  },
  "dependencies": {
    "atom-haskell-utils": "^0.8.0",
    "atom-space-pen-views": "^2.0.3",
    "clone": "^1.0.2",
    "fs": "~0.0.2",
    "fuzzaldrin": "^2.1.0",
    "promise-queue": "^2.2.0",
    "temp": "^0.8.1",
    "underscore-plus": "^1.6.6"
  },
  "description": "Provides backends for ide-haskell and autocomplete-haskell",
  "devDependencies": {},
  "engines": {
    "atom": ">=1.13.0 <2.0.0"
  },
  "homepage": "https://github.com/atom-haskell/haskell-ghc-mod#readme",
  "keywords": [
    "ide-haskell",
    "ide",
    "haskell",
    "ghc-mod",
    "backend"
  ],
  "license": "MIT",
  "main": "./lib/haskell-ghc-mod",
  "name": "haskell-ghc-mod",
  "optionalDependencies": {},
  "providedServices": {
    "haskell-completion-backend": {
      "description": "Implements general haskell-completion-backend spec",
      "versions": {
        "1.0.0": "provideCompletionBackend"
      }
    },
    "linter": {
      "versions": {
        "1.0.0": "provideLinter"
      }
    }
  },
  "readme": "# haskell-ghc-mod atom package\n\nThis package is primarily intended as backend for [ide-haskell](https://atom.io/packages/ide-haskell).\n\nHaskell ghc-mod opens pipe to ghc-modi and queries types, info and checks\nfor errors. It uses temporary files to feed them into ghc-mod (since it does\nnot read from stdin)\n\nIf ghc-mod/ghc-modi is not in your PATH, set full path to those in config.\n\n## Dependencies\n\nNOTE: when using with stack, see https://github.com/atom-haskell/haskell-ghc-mod/wiki/Using-with-stack\n\nYou need to have `ghc-mod`, `ghc-modi` (part of ghc-mod) and `hlint` executables\ninstalled on your system. `ghc-mod` needs to be able to find `hlint` (eiter add `hlint` directory to PATH, or install both in the same cabal sandbox).\n\nSupported `ghc-mod` versions are 5.5.x. and up. 5.4 is deprecated, but should work in most cases. Earlier versions most likely won't work.\n\nQuick setup is as follows:\n\n```\n$ cabal update\n$ cabal install ghc-mod\n```\n\nAfter this process finishes, you'll have `ghc-mod`, `ghc-modi` and `hlint` available in `$HOME/.cabal/bin/` directory.\n\nNote for Mac users: on OSX cabal by default installs files into `$HOME/Library/Haskell/bin`\n\nPlease note, that for ghc>=7.10 and/or cabal>=1.22, you need ghc-mod>=5.3.0.0. ghc-mod versions before 5.3.0.0 won't work.\n\nUser interface is provided by [ide-haskell](https://atom.io/packages/ide-haskell)\n\n## Atom Linter package support\n\nhaskell-ghc-mod can use [linter](https://atom.io/packages/linter) package instead of ide-haskell to show check and lint results. You still need ide-haskell for type/info tooltips though.\n\nTo use linter, enable 'Use Linter' option in haskell-ghc-mod settings. Bear in mind, that it will disable ide-haskell markers for check/lint results. As of now, no additional checks are preformed, so if linter package is not installed or disabled, you won't see check/lint results at all.\n\n## Installation\n\n```\n$ apm install language-haskell haskell-ghc-mod ide-haskell autocomplete-haskell\n```\n\n## Configuration\n\nNOTE: when using with stack, see https://github.com/atom-haskell/haskell-ghc-mod/wiki/Using-with-stack\n\nOnly configuration option you will likely need to set is `ghcModPath`. It needs to be set to full path to `ghc-mod` executable, if it is not in your PATH. For example, if you have `ghc-mod` in `/home/user/.cabal/bin/`, you need to write `/home/user/.cabal/bin/ghc-mod` in `ghcModPath`. Note that shell expansions are *not* suported, i.e. you can't use `~` or `$HOME`.\n\nThere can be some problems with ghc-modi upstream, most notably, it does not\nwork on paths with whitespace. If you experience problems, try disabling\n`ghc-modi` by setting `enableGhcModi` to `false` (or uncheck tick in settings).\nThis will be slower, but may work better on some configurations.\n\nIf you are on OSX, or have ghc installed with non-standard prefix, you may also\nconsider adding path to directory containing ghc/ghci executable to\n`additionalPathDirectories` configuration option. It is a comma-separated list\nof directories that will be added to your search path when invoking ghc-mod.\nFor example, if you have ghc installed to `/usr/local`, then you would add\n`/usr/local/bin` to `additionalPathDirectories`.\n\nOn OSX, if you start Atom from Finder or with desktop icon, it doesn't inherit\nenvironment variables specified in your user shell (in `.profile`, `.bashrc`,\netc). You can copy `PATH` settings from your shell to\n`additionalPathDirectories`, if you'd like to run Atom in this way.\n\n## Keybindings\n\nHaskell-ghc-mod comes with little pre-specified keybindings, so you will need to specify your own, if you want those.\n\nYou can edit Atom keybindings by opening 'Edit → Open Your Keymap'. Here is a template for all commands, provided by haskell-ghc-mod:\n\n```cson\n'atom-text-editor[data-grammar~=\"haskell\"]':\n  '': 'haskell-ghc-mod:check-file'\n  '': 'haskell-ghc-mod:lint-file'\n  'ctrl-alt-t': 'haskell-ghc-mod:show-type' #this is an example binding\n  'ctrl-alt-i': 'haskell-ghc-mod:show-info' #this is an example binding\n  'ctrl-alt-T': 'haskell-ghc-mod:insert-type' #this is an example binding\n  '': 'haskell-ghc-mod:case-split'\n  '': 'haskell-ghc-mod:sig-fill'\n  '': 'haskell-ghc-mod:show-info-fallback-to-type'\n  '': 'haskell-ghc-mod:show-type-fallback-to-info'\n  '': 'haskell-ghc-mod:show-type-and-info'\n  '': 'haskell-ghc-mod:insert-import'\n  '': 'haskell-ghc-mod:go-to-declaration'\n\n'atom-workspace':\n  '': 'haskell-ghc-mod:shutdown-backend'\n```\n\n## Service-hub API\n\nSince 1.0.0, haskell-ghc-mod provides `haskell-completion-backend` service.\n\n**NOTE**: Prior to 1.0.0, ide-backend service was provided. It has been scrapped in favor of ide-haskell's UPI.\n\nYou can find description in [completion-backend.coffee][2]\n\n[2]:https://github.com/atom-haskell/haskell-ghc-mod/blob/master/lib/completion-backend/completion-backend.coffee\n\n# Advanced configuration\n\nIn some cases, it could be useful to disable ghc-mod completely for a given project (e.g. GHCJS), or suppress error pop-ups (e.g. in case of known ghc-mod bugs where some features don't work, or don't always work).\n\nYou can create `.haskell-ghc-mod.json` file in project root (i.e. directory containing a `*.cabal` file, or -- in case of plain projects -- Atom's project root directory).\n\n`.haskell-ghc-mod.json` from Atom project root will also be honored, if it exists, with lower priority.\n\nYou can also create a global config file in `${ATOM_CONFIG_DIR}/haskell-ghc-mod.json`. `${ATOM_CONFIG_DIR}` is usually `${HOME}/.atom`, but you can check it's path by running `atom.getConfigDirPath()` in Atom's developer console (View → Developer → Toggle Developer Tools → Console).\n\nConfig file is a JSON file with the following fields:\n\n- `\"disable\"` -- `true`/`false`. Will disable all ghc-mod functions entirely. If omitted, defaults to `false`.\n- `\"suppressErrors\"` -- `true`/`false`. Will suppress error pop-ups. Those still will be displayed in Atom's console (View → Developer → Toggle Developer Tools), so if someting seems wierd, one could check there.\n- `\"ghcOptions\"` -- Array of Strings. Options to pass to GHC. Can be useful to explicitly suppress warnings, e.g. `-fno-warn-unused-do-bind` or anything else.\n- `\"ghcModOptions\"` -- Array of Strings. Arbitrary options to pass to ghc-mod. Bear in mind that you shouldn't *really* change most ghc-mod options, since the package makes some assumptions on that part. Also only global ghc-mod options will work (i.e. no command-specific ones)\n\nExample:\n\n```json\n{\n  \"disable\": false,\n  \"suppressErrors\": true,\n  \"ghcOptions\": [\"-fno-warn-unused-do-bind\", \"-fno-warn-name-shadowing\"],\n  \"ghcModOptions\": [\"--with-ghc\", \"/path/to/custom/ghc\"]\n}\n```\n\n# License\n\nThis software is licensed under MIT license. See LICENSE.md for details.\n\nContributors:\n\n* Nikolay Yakimov\n* Daniel Gröber\n* Petr Gladkikh\n* Mike MacDonald\n* Maiddog\n* Jason Jackson\n* Dennis J. McWherter Jr\n* Aaron Wolf\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/atom-haskell/haskell-ghc-mod.git"
  },
  "version": "1.19.9"
}
